name: omnivore

services:
  postgres:
    image: "ankane/pgvector:v0.5.1"
    container_name: "omnivore-postgres"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: omnivore
    healthcheck:
      test: "exit 0"
      interval: 2s
      timeout: 12s
      retries: 3

  redis:
    image: "redis:7.2.4"
    container_name: "omnivore-redis"
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  migrate:
    image: ceramicwhite/omnivore:migrate-latest
    container_name: "omnivore-migrate"
    environment:
      - PGPASSWORD=postgres
      - POSTGRES_USER=postgres
      - PG_HOST=postgres
      - PG_PASSWORD=app_pass
      - PG_DB=omnivore
    depends_on:
      postgres:
        condition: service_healthy

  api:
    image: ceramicwhite/omnivore:api-latest
    container_name: "omnivore-api"
    ports:
      - "4000:8080"
    environment:
      - PG_HOST=postgres
      - PG_USER=app_user
      - PG_PASSWORD=app_pass
      - PG_DB=omnivore
      - JWT_SECRET=some_secret
      - SSO_JWT_SECRET=some_sso_secret
      - REDIS_URL=redis://redis:6379
    depends_on:
      migrate:
        condition: service_completed_successfully

  web:
    image: ceramicwhite/omnivore:web-latest
    container_name: "omnivore-web"
    ports:
      - "3000:8080"
    environment:
      - NEXT_PUBLIC_APP_ENV=prod
      - NEXT_PUBLIC_BASE_URL=http://localhost:3000
      - NEXT_PUBLIC_SERVER_BASE_URL=http://localhost:4000
    depends_on:
      - api

  content-fetch:
    image: ceramicwhite/omnivore:content-fetch-latest
    container_name: "omnivore-content-fetch"
    ports:
      - "9090:8080"
    environment:
      - JWT_SECRET=some_secret
      - REST_BACKEND_ENDPOINT=http://api:8080/api
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - api