# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  userValues,
  ...
}: {
  sops.secrets = {
    "passwords/pihole" = {
      sopsFile = userValues.sopsFile;
    };
  };
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environment = {
      "FTLCONF_dns_listeningMode" = "all";
      #"FTLCONF_webserver_api_password" = "";
      #"WEBPASSWORD_FILE" = "/run/secrets/pihole";
      "TZ" = "Europe/London";
    };
    cmd = [
      "-c"
      ''
        if [ -r /run/secrets/pihole ]; then
          export FTLCONF_webserver_api_password="$(tr -d '\r' </run/secrets/pihole)"
        fi
        exec /usr/bin/start.sh
      ''
    ];
    volumes = [
      "/etc/pihole:/etc/pihole:rw"
      "${config.sops.secrets."passwords/pihole".path}:/run/secrets/pihole"
    ];
    ports = [
      "53:53/tcp"
      "53:53/udp"
      "80:80/tcp"
      "443:443/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--cap-add=SYS_NICE"
      "--cap-add=SYS_TIME"
      "--network-alias=pihole"
      "--network=pihole_default"
    ];
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pihole_default.service"
    ];
    requires = [
      "docker-network-pihole_default.service"
    ];
    partOf = [
      "docker-compose-pihole-root.target"
    ];
    wantedBy = [
      "docker-compose-pihole-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-pihole_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f pihole_default";
    };
    script = ''
      docker network inspect pihole_default || docker network create pihole_default
    '';
    partOf = ["docker-compose-pihole-root.target"];
    wantedBy = ["docker-compose-pihole-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
